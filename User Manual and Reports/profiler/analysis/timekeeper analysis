Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ns/call  ns/call  name    
100.01      0.11     0.11   477866   230.21   230.21  _fini
  0.00      0.11     0.00   190474     0.00     0.00  myTuple* std::copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*)
  0.00      0.11     0.00   143969     0.00     0.00  __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&)
  0.00      0.11     0.00   136230     0.00     0.00  std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const
  0.00      0.11     0.00    81528     0.00     0.00  __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::__normal_iterator(myTuple const* const&)
  0.00      0.11     0.00    68878     0.00     0.00  myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*)
  0.00      0.11     0.00    64183     0.00     0.00  myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&)
  0.00      0.11     0.00    42784     0.00     0.00  unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  0.00      0.11     0.00    29949     0.00     0.00  std::priority_queue<myTuple, std::vector<myTuple, std::allocator<myTuple> >, CompareTuple>::~priority_queue()
  0.00      0.11     0.00    21353     0.00     0.00  std::_Miter_base<std::move_iterator<myTuple*> >::iterator_type std::__miter_base<std::move_iterator<myTuple*> >(std::move_iterator<myTuple*>)
  0.00      0.11     0.00    21227     0.00     0.00  __do_global_ctors_aux
  0.00      0.11     0.00    16427     0.00     0.00  __libc_csu_init
  0.00      0.11     0.00     8553     0.00     0.00  std::_Niter_base<myTuple*>::iterator_type std::__niter_base<myTuple*>(myTuple*)
  0.00      0.11     0.00     3446     0.00     0.00  myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
  0.00      0.11     0.00     2478     0.00     0.00  myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&)
  0.00      0.11     0.00     1947     0.00     0.00  std::vector<myTuple, std::allocator<myTuple> >::max_size() const
  0.00      0.11     0.00     1913     0.00     0.00  myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*)
  0.00      0.11     0.00     1911     0.00   345.56  std::move_iterator<myTuple*>::base() const
  0.00      0.11     0.00     1911     0.00     0.00  std::allocator<myTuple>::allocator(std::allocator<myTuple> const&)
  0.00      0.11     0.00     1911     0.00   691.11  myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*)
  0.00      0.11     0.00     1911     0.00   345.56  myTuple* std::__copy_move_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
  0.00      0.11     0.00     1910     0.00     0.00  myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
  0.00      0.11     0.00     1791     0.00     0.00  std::move_iterator<myTuple*> std::make_move_iterator<myTuple*>(myTuple* const&)
  0.00      0.11     0.00     1700     0.00     0.00  __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::base() const
  0.00      0.11     0.00      455     0.00     0.00  std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_allocate(unsigned long)
  0.00      0.11     0.00       24     0.00     0.00  std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>)
  0.00      0.11     0.00        4     0.00     0.00  myTuple* std::move_backward<myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
  0.00      0.11     0.00        1     0.00     0.00  __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const
  0.00      0.11     0.00        1     0.00     0.00  std::_Vector_base<myTuple, std::allocator<myTuple> >::_Vector_impl::_Vector_impl(std::allocator<myTuple> const&)
  0.00      0.11     0.00        1     0.00   345.56  void std::__adjust_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 9.09% of 0.11 seconds

index % time    self  children    called     name
[1]    100.0    0.11    0.00  318354+550788  <cycle 1 as a whole> [1]
                0.11    0.00  477866+3326741     _fini <cycle 1> [2]
                0.00    0.00  143969             __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                0.00    0.00  136230             std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
                0.00    0.00   64183             myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                0.00    0.00   21227             __do_global_ctors_aux <cycle 1> [38]
                0.00    0.00   16427             __libc_csu_init <cycle 1> [39]
                0.00    0.00    3446             myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                0.00    0.00    1947             std::vector<myTuple, std::allocator<myTuple> >::max_size() const <cycle 1> [43]
                0.00    0.00    1913             myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) <cycle 1> [44]
                0.00    0.00    1910             myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [46]
                0.00    0.00      24             std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>) <cycle 1> [50]
-----------------------------------------------
                             3326741             _fini <cycle 1> [2]
                                  24             std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>) <cycle 1> [50]
                                1724             myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                                1910             myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [46]
                                1946             std::vector<myTuple, std::allocator<myTuple> >::max_size() const <cycle 1> [43]
                                5739             myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) <cycle 1> [44]
                               14700             __libc_csu_init <cycle 1> [39]
                               64186             myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                              143963             __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                0.00    0.00       1/318354      void std::__pop_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple) [21]
                0.00    0.00    1694/318354      void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
                0.00    0.00    1724/318354      atexit [18]
                0.00    0.00    1910/318354      std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_get_Tp_allocator() const [16]
                0.00    0.00    1910/318354      __gnu_cxx::new_allocator<myTuple>::max_size() const [15]
                0.00    0.00    1910/318354      myTuple* std::uninitialized_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [17]
                0.00    0.00    1911/318354      myTuple* std::__copy_move_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [13]
                0.00    0.00    1911/318354      std::move_iterator<myTuple*>::base() const [12]
                0.00    0.00    1911/318354      myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*) [9]
                0.00    0.00    3820/318354      std::move_iterator<myTuple*>::move_iterator(myTuple*) [10]
                0.01    0.00   30699/318354      myTuple* std::__copy_move_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [6]
                0.02    0.00   50309/318354      __gnu_cxx::new_allocator<myTuple>::allocate(unsigned long, void const*) [5]
                0.05    0.00  143964/318354      std::_Iter_base<myTuple*, false>::_S_base(myTuple*) [3]
[2]    100.0    0.11    0.00  477866+3326741 _fini <cycle 1> [2]
                0.00    0.00   81528/81528       __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::__normal_iterator(myTuple const* const&) [32]
                0.00    0.00   28038/29949       std::priority_queue<myTuple, std::vector<myTuple, std::allocator<myTuple> >, CompareTuple>::~priority_queue() [36]
                0.00    0.00   24574/190474      myTuple* std::copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [29]
                0.00    0.00   17027/42784       unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [35]
                0.00    0.00    7468/68878       myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [33]
                0.00    0.00    3460/8553        std::_Niter_base<myTuple*>::iterator_type std::__niter_base<myTuple*>(myTuple*) [40]
                0.00    0.00    2386/21353       std::_Miter_base<std::move_iterator<myTuple*> >::iterator_type std::__miter_base<std::move_iterator<myTuple*> >(std::move_iterator<myTuple*>) [37]
                0.00    0.00    1911/1911        std::allocator<myTuple>::allocator(std::allocator<myTuple> const&) [45]
                0.00    0.00     769/2478        myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&) [42]
                0.00    0.00     443/455         std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_allocate(unsigned long) [49]
                0.00    0.00      93/1791        std::move_iterator<myTuple*> std::make_move_iterator<myTuple*>(myTuple* const&) [47]
                0.00    0.00       3/4           myTuple* std::move_backward<myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [51]
                0.00    0.00       1/1           __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [52]
                              134518             std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
                               86523             __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                               59084             myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                               19503             __do_global_ctors_aux <cycle 1> [38]
                                9346             __libc_csu_init <cycle 1> [39]
                                1748             myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                                 257             std::vector<myTuple, std::allocator<myTuple> >::max_size() const <cycle 1> [43]
                                 213             myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) <cycle 1> [44]
                                 210             myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [46]
                             3326741             _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[3]     45.2    0.00    0.05                 std::_Iter_base<myTuple*, false>::_S_base(myTuple*) [3]
                0.05    0.00  143964/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[4]     18.0    0.00    0.02                 void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
                0.02    0.00   55750/318354      __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                0.00    0.00    1700/318354      myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                0.00    0.00   59500/68878       myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [33]
                0.00    0.00   54050/190474      myTuple* std::copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [29]
                0.00    0.00   18967/21353       std::_Miter_base<std::move_iterator<myTuple*> >::iterator_type std::__miter_base<std::move_iterator<myTuple*> >(std::move_iterator<myTuple*>) [37]
                0.00    0.00   18967/42784       unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [35]
-----------------------------------------------
                                                 <spontaneous>
[5]     15.8    0.00    0.02                 __gnu_cxx::new_allocator<myTuple>::allocate(unsigned long, void const*) [5]
                0.02    0.00   50309/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[6]      9.6    0.00    0.01                 myTuple* std::__copy_move_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [6]
                0.01    0.00   30699/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[7]      3.2    0.00    0.00                 void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
                0.00    0.00    3399/318354      myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                0.00    0.00    1703/318354      std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
                0.00    0.00    1700/318354      myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [46]
                0.00    0.00    1696/318354      __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                0.00    0.00    1694/318354      _fini <cycle 1> [2]
                0.00    0.00    6790/42784       unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [35]
                0.00    0.00    5093/8553        std::_Niter_base<myTuple*>::iterator_type std::__niter_base<myTuple*>(myTuple*) [40]
                0.00    0.00    1700/1700        __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [48]
                0.00    0.00    1698/1791        std::move_iterator<myTuple*> std::make_move_iterator<myTuple*>(myTuple* const&) [47]
                0.00    0.00       9/2478        myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&) [42]
-----------------------------------------------
                                                 <spontaneous>
[8]      1.8    0.00    0.00                 myTuple&& std::forward<myTuple>(std::remove_reference<myTuple>::type&) [8]
                0.00    0.00    1911/1911        myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*) [9]
                0.00    0.00    1911/318354      __libc_csu_init <cycle 1> [39]
-----------------------------------------------
                0.00    0.00    1911/1911        myTuple&& std::forward<myTuple>(std::remove_reference<myTuple>::type&) [8]
[9]      1.2    0.00    0.00    1911         myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*) [9]
                0.00    0.00    1911/318354      _fini <cycle 1> [2]
                0.00    0.00    1911/1911        myTuple* std::__copy_move_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [13]
-----------------------------------------------
                                                 <spontaneous>
[10]     1.2    0.00    0.00                 std::move_iterator<myTuple*>::move_iterator(myTuple*) [10]
                0.00    0.00    3820/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[11]     1.1    0.00    0.00                 void __gnu_cxx::new_allocator<myTuple>::construct<myTuple>(myTuple*, myTuple&&) [11]
                0.00    0.00    1698/318354      myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                0.00    0.00    1690/318354      std::vector<myTuple, std::allocator<myTuple> >::max_size() const <cycle 1> [43]
                0.00    0.00    1700/2478        myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&) [42]
-----------------------------------------------
                0.00    0.00    1911/1911        __gnu_cxx::new_allocator<myTuple>::new_allocator() [14]
[12]     0.6    0.00    0.00    1911         std::move_iterator<myTuple*>::base() const [12]
                0.00    0.00    1911/318354      _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00    1911/1911        myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*) [9]
[13]     0.6    0.00    0.00    1911         myTuple* std::__copy_move_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [13]
                0.00    0.00    1911/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[14]     0.6    0.00    0.00                 __gnu_cxx::new_allocator<myTuple>::new_allocator() [14]
                0.00    0.00    1911/1911        std::move_iterator<myTuple*>::base() const [12]
-----------------------------------------------
                                                 <spontaneous>
[15]     0.6    0.00    0.00                 __gnu_cxx::new_allocator<myTuple>::max_size() const [15]
                0.00    0.00    1910/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[16]     0.6    0.00    0.00                 std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_get_Tp_allocator() const [16]
                0.00    0.00    1910/318354      _fini <cycle 1> [2]
                0.00    0.00    1910/68878       myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [33]
-----------------------------------------------
                                                 <spontaneous>
[17]     0.6    0.00    0.00                 myTuple* std::uninitialized_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [17]
                0.00    0.00    1910/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[18]     0.5    0.00    0.00                 atexit [18]
                0.00    0.00    1724/318354      _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[19]     0.5    0.00    0.00                 std::vector<myTuple, std::allocator<myTuple> >::size() const [19]
                0.00    0.00    1724/318354      __libc_csu_init <cycle 1> [39]
-----------------------------------------------
                                                 <spontaneous>
[20]     0.5    0.00    0.00                 __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::operator--() [20]
                0.00    0.00    1700/318354      myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) <cycle 1> [44]
-----------------------------------------------
                                                 <spontaneous>
[21]     0.0    0.00    0.00                 void std::__pop_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple) [21]
                0.00    0.00       4/318354      std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
                0.00    0.00       1/318354      _fini <cycle 1> [2]
                0.00    0.00      12/455         std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_allocate(unsigned long) [49]
-----------------------------------------------
                                                 <spontaneous>
[22]     0.0    0.00    0.00                 myTuple const& std::forward<myTuple const&>(std::remove_reference<myTuple const&>::type&) [22]
                0.00    0.00       4/318354      std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::new_allocator<myTuple>::construct(myTuple*, myTuple const&) [24]
[23]     0.0    0.00    0.00       1         void std::__adjust_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [23]
                0.00    0.00       1/318354      std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
-----------------------------------------------
                                                 <spontaneous>
[24]     0.0    0.00    0.00                 __gnu_cxx::new_allocator<myTuple>::construct(myTuple*, myTuple const&) [24]
                0.00    0.00       1/1           void std::__adjust_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [23]
-----------------------------------------------
                0.00    0.00   24574/190474      _fini <cycle 1> [2]
                0.00    0.00   54050/190474      void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
                0.00    0.00  111850/190474      __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::operator-(long const&) const [74]
[29]     0.0    0.00    0.00  190474         myTuple* std::copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [29]
-----------------------------------------------
                               86523             _fini <cycle 1> [2]
                0.00    0.00    1696/318354      void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
                0.02    0.00   55750/318354      void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
[30]     0.0    0.00    0.00  143969         __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) <cycle 1> [30]
                              143963             _fini <cycle 1> [2]
-----------------------------------------------
                              134518             _fini <cycle 1> [2]
                0.00    0.00       1/318354      void std::__adjust_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [23]
                0.00    0.00       4/318354      void std::__pop_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple) [21]
                0.00    0.00       4/318354      myTuple const& std::forward<myTuple const&>(std::remove_reference<myTuple const&>::type&) [22]
                0.00    0.00    1703/318354      void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[31]     0.0    0.00    0.00  136230         std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
                                  24             std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>) <cycle 1> [50]
-----------------------------------------------
                0.00    0.00   81528/81528       _fini <cycle 1> [2]
[32]     0.0    0.00    0.00   81528         __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::__normal_iterator(myTuple const* const&) [32]
-----------------------------------------------
                0.00    0.00    1910/68878       std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_get_Tp_allocator() const [16]
                0.00    0.00    7468/68878       _fini <cycle 1> [2]
                0.00    0.00   59500/68878       void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
[33]     0.0    0.00    0.00   68878         myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [33]
-----------------------------------------------
                               59084             _fini <cycle 1> [2]
                0.00    0.00    1700/318354      void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
                0.00    0.00    3399/318354      void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[34]     0.0    0.00    0.00   64183         myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&) <cycle 1> [34]
                               64186             _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00    6790/42784       void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
                0.00    0.00   17027/42784       _fini <cycle 1> [2]
                0.00    0.00   18967/42784       void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
[35]     0.0    0.00    0.00   42784         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [35]
-----------------------------------------------
                0.00    0.00    1911/29949       std::allocator<myTuple>::allocator(std::allocator<myTuple> const&) [45]
                0.00    0.00   28038/29949       _fini <cycle 1> [2]
[36]     0.0    0.00    0.00   29949         std::priority_queue<myTuple, std::vector<myTuple, std::allocator<myTuple> >, CompareTuple>::~priority_queue() [36]
-----------------------------------------------
                0.00    0.00    2386/21353       _fini <cycle 1> [2]
                0.00    0.00   18967/21353       void std::__push_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [4]
[37]     0.0    0.00    0.00   21353         std::_Miter_base<std::move_iterator<myTuple*> >::iterator_type std::__miter_base<std::move_iterator<myTuple*> >(std::move_iterator<myTuple*>) [37]
-----------------------------------------------
                                1724             myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                               19503             _fini <cycle 1> [2]
[38]     0.0    0.00    0.00   21227         __do_global_ctors_aux <cycle 1> [38]
                                1724             __libc_csu_init <cycle 1> [39]
-----------------------------------------------
                                1722             myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                                1724             __do_global_ctors_aux <cycle 1> [38]
                                9346             _fini <cycle 1> [2]
                0.00    0.00    1724/318354      std::vector<myTuple, std::allocator<myTuple> >::size() const [19]
                0.00    0.00    1911/318354      myTuple&& std::forward<myTuple>(std::remove_reference<myTuple>::type&) [8]
[39]     0.0    0.00    0.00   16427         __libc_csu_init <cycle 1> [39]
                               14700             _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00    3460/8553        _fini <cycle 1> [2]
                0.00    0.00    5093/8553        void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[40]     0.0    0.00    0.00    8553         std::_Niter_base<myTuple*>::iterator_type std::__niter_base<myTuple*>(myTuple*) [40]
-----------------------------------------------
                                1748             _fini <cycle 1> [2]
                0.00    0.00    1698/318354      void __gnu_cxx::new_allocator<myTuple>::construct<myTuple>(myTuple*, myTuple&&) [11]
[41]     0.0    0.00    0.00    3446         myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [41]
                                1724             __do_global_ctors_aux <cycle 1> [38]
                                1724             _fini <cycle 1> [2]
                                1722             __libc_csu_init <cycle 1> [39]
-----------------------------------------------
                0.00    0.00       9/2478        void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
                0.00    0.00     769/2478        _fini <cycle 1> [2]
                0.00    0.00    1700/2478        void __gnu_cxx::new_allocator<myTuple>::construct<myTuple>(myTuple*, myTuple&&) [11]
[42]     0.0    0.00    0.00    2478         myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&) [42]
-----------------------------------------------
                                 257             _fini <cycle 1> [2]
                0.00    0.00    1690/318354      void __gnu_cxx::new_allocator<myTuple>::construct<myTuple>(myTuple*, myTuple&&) [11]
[43]     0.0    0.00    0.00    1947         std::vector<myTuple, std::allocator<myTuple> >::max_size() const <cycle 1> [43]
                                1946             _fini <cycle 1> [2]
-----------------------------------------------
                                 213             _fini <cycle 1> [2]
                0.00    0.00    1700/318354      __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::operator--() [20]
[44]     0.0    0.00    0.00    1913         myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) <cycle 1> [44]
                                5739             _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00    1911/1911        _fini <cycle 1> [2]
[45]     0.0    0.00    0.00    1911         std::allocator<myTuple>::allocator(std::allocator<myTuple> const&) [45]
                0.00    0.00    1911/29949       std::priority_queue<myTuple, std::vector<myTuple, std::allocator<myTuple> >, CompareTuple>::~priority_queue() [36]
-----------------------------------------------
                                 210             _fini <cycle 1> [2]
                0.00    0.00    1700/318354      void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[46]     0.0    0.00    0.00    1910         myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) <cycle 1> [46]
                                1910             _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00      93/1791        _fini <cycle 1> [2]
                0.00    0.00    1698/1791        void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[47]     0.0    0.00    0.00    1791         std::move_iterator<myTuple*> std::make_move_iterator<myTuple*>(myTuple* const&) [47]
-----------------------------------------------
                0.00    0.00    1700/1700        void std::vector<myTuple, std::allocator<myTuple> >::_M_insert_aux<myTuple const&>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, myTuple const&) [7]
[48]     0.0    0.00    0.00    1700         __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [48]
-----------------------------------------------
                0.00    0.00      12/455         void std::__pop_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, CompareTuple) [21]
                0.00    0.00     443/455         _fini <cycle 1> [2]
[49]     0.0    0.00    0.00     455         std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_allocate(unsigned long) [49]
-----------------------------------------------
                                  24             std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const <cycle 1> [31]
[50]     0.0    0.00    0.00      24         std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>) <cycle 1> [50]
                                  24             _fini <cycle 1> [2]
-----------------------------------------------
                0.00    0.00       1/4           __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [52]
                0.00    0.00       3/4           _fini <cycle 1> [2]
[51]     0.0    0.00    0.00       4         myTuple* std::move_backward<myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [51]
-----------------------------------------------
                0.00    0.00       1/1           _fini <cycle 1> [2]
[52]     0.0    0.00    0.00       1         __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [52]
                0.00    0.00       1/4           myTuple* std::move_backward<myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [51]
                0.00    0.00       1/1           std::_Vector_base<myTuple, std::allocator<myTuple> >::_Vector_impl::_Vector_impl(std::allocator<myTuple> const&) [53]
-----------------------------------------------
                0.00    0.00       1/1           __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [52]
[53]     0.0    0.00    0.00       1         std::_Vector_base<myTuple, std::allocator<myTuple> >::_Vector_impl::_Vector_impl(std::allocator<myTuple> const&) [53]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Index by function name

  [30] __gnu_cxx::new_allocator<myTuple>::new_allocator(__gnu_cxx::new_allocator<myTuple> const&) [53] std::_Vector_base<myTuple, std::allocator<myTuple> >::_Vector_impl::_Vector_impl(std::allocator<myTuple> const&) [34] myTuple* std::__uninitialized_copy_a<std::move_iterator<myTuple*>, myTuple*, myTuple>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*, std::allocator<myTuple>&)
  [32] __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::__normal_iterator(myTuple const* const&) [36] std::priority_queue<myTuple, std::vector<myTuple, std::allocator<myTuple> >, CompareTuple>::~priority_queue() [42] myTuple* std::__uninitialized_move_a<myTuple*, myTuple*, std::allocator<myTuple> >(myTuple*, myTuple*, myTuple*, std::allocator<myTuple>&)
  [52] __gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [44] myTuple* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<myTuple>(myTuple const*, myTuple const*, myTuple*) [41] myTuple* std::__copy_move_backward_a2<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
  [48] __gnu_cxx::__normal_iterator<myTuple const*, std::vector<myTuple, std::allocator<myTuple> > >::base() const [33] myTuple* std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*) [35] unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  [12] std::move_iterator<myTuple*>::base() const [37] std::_Miter_base<std::move_iterator<myTuple*> >::iterator_type std::__miter_base<std::move_iterator<myTuple*> >(std::move_iterator<myTuple*>) [29] myTuple* std::copy<std::move_iterator<myTuple*>, myTuple*>(std::move_iterator<myTuple*>, std::move_iterator<myTuple*>, myTuple*)
  [31] std::vector<myTuple, std::allocator<myTuple> >::_M_check_len(unsigned long, char const*) const [40] std::_Niter_base<myTuple*>::iterator_type std::__niter_base<myTuple*>(myTuple*) [38] __do_global_ctors_aux
  [43] std::vector<myTuple, std::allocator<myTuple> >::max_size() const [23] void std::__adjust_heap<__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, myTuple, CompareTuple>(__gnu_cxx::__normal_iterator<myTuple*, std::vector<myTuple, std::allocator<myTuple> > >, long, long, myTuple, CompareTuple) [39] __libc_csu_init
  [45] std::allocator<myTuple>::allocator(std::allocator<myTuple> const&) [13] myTuple* std::__copy_move_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [2] _fini
  [50] std::_Iter_base<std::move_iterator<myTuple*>, true>::_S_base(std::move_iterator<myTuple*>) [51] myTuple* std::move_backward<myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*) [1] <cycle 1>
   [9] myTuple* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<myTuple>(myTuple const*, myTuple const*, myTuple*) [47] std::move_iterator<myTuple*> std::make_move_iterator<myTuple*>(myTuple* const&)
  [49] std::_Vector_base<myTuple, std::allocator<myTuple> >::_M_allocate(unsigned long) [46] myTuple* std::__copy_move_backward_a<true, myTuple*, myTuple*>(myTuple*, myTuple*, myTuple*)
